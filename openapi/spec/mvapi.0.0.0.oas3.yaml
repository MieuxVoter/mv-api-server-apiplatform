openapi: 3.0.2
info:
  title: 'Majority Judgment API'
  version: 0.0.0-dev
  description: |
    This is a **deliberation service** using **majority judgment** polling.
    It's **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr).
    You're browsing the API documentation and sandbox.

    ## Use one of the known clients

    - TODO: add an URL to a client of the API


    ## Try it out the hard way

    ### Create an account

    You will need a user account to interact with polls.
    Head to **Registration** â†’ `POST /users` below.
    Click _Try it out_, set your desired credentials, and execute the query.
    Scroll down to see the response.

    ### Authenticate

    Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour.
    Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button.

    ### Create a poll

    **Poll** â†’ `POST /polls`

    Keep the response, you'll need the uuids.

    > TODO: document invitation generation

    ### Submit judgments

    **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`

    One request per proposal, for now.  We plan on making an endpoint to submit them all at once.

    ### Collect the results

    **Result** â†’ `GET /polls/{id}/result`

    ## Use a generated client library

    - for php  (link!)
    - for typescript-node  (link!!)
    - â€¦

    There are clients we can generate for most languages.
    Get in touch if you'd like one in particular!
    Or clone this project and use `bin/generate-client.bash -t whatever`.
paths:
  '/ballots/{id}':
    get:
      description: 'Inspect a previously submitted Ballot.'
      tags:
        - Ballot
      operationId: getBallotItem
      summary: 'Retrieves a Ballot resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'Ballot resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Ballot:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Ballot-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Ballot-read'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Ballot
      operationId: deleteBallotItem
      summary: 'Removes the Ballot resource.'
      responses:
        204:
          description: 'Ballot resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
  '/grades/{id}':
    get:
      tags:
        - Grade
      operationId: getGradeItem
      summary: 'Retrieves a Grade resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'Grade resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Grade:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Grade-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Grade-read'
        404:
          description: 'Resource not found'
  /invitations:
    get:
      tags:
        - Invitation
      operationId: getInvitationCollection
      summary: 'Retrieves the collection of Invitation resources.'
      responses:
        200:
          description: 'Invitation collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Invitation:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invitation-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invitation-read'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
  '/invitations/{id}':
    get:
      tags:
        - Invitation
      operationId: getInvitationItem
      summary: 'Retrieves a Invitation resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'Invitation resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Invitation:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Invitation-read'
        404:
          description: 'Resource not found'
  /polls:
    get:
      tags:
        - Poll
      operationId: getPollCollection
      summary: 'Retrieves the collection of Poll resources.'
      responses:
        200:
          description: 'Poll collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Poll:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Poll-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Poll-read'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Poll
      operationId: postPollCollection
      summary: 'Creates a Poll resource.'
      responses:
        201:
          description: 'Poll resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Poll:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Poll-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Poll-read'
          links:
            GetPollItem:
              parameters:
                uuid: '$response.body#/uuid'
              operationId: getPollItem
              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /polls/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Poll:jsonld-create'
          application/json:
            schema:
              $ref: '#/components/schemas/Poll-create'
          text/html:
            schema:
              $ref: '#/components/schemas/Poll-create'
        description: 'The new Poll resource'
  '/polls/{id}':
    get:
      tags:
        - Poll
      operationId: getPollItem
      summary: 'Retrieves a Poll resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'Poll resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Poll:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Poll-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Poll-read'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Poll
      operationId: deletePollItem
      summary: 'Removes the Poll resource.'
      responses:
        204:
          description: 'Poll resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
  '/polls/{id}/grades':
    get:
      tags:
        - Grade
        - Poll
      operationId: api_polls_grades_get_subresource
      summary: 'Retrieves the collection of Grade resources.'
      responses:
        200:
          description: 'Grade collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Grade:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Grade-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Grade-read'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
  '/polls/{id}/invitations':
    get:
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
      tags:
        - Invitation
      operationId: get_for_pollInvitationCollection
      summary: 'Retrieves the collection of Invitation resources.'
      responses:
        200:
          description: 'Invitation collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Invitation:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invitation-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invitation-read'
  '/polls/{id}/proposals':
    get:
      tags:
        - Proposal
        - Poll
      operationId: api_polls_proposals_get_subresource
      summary: 'Retrieves the collection of Proposal resources.'
      responses:
        200:
          description: 'Proposal collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Proposal:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal-read'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      tags:
        - Proposal
      operationId: postProposalCollection
      summary: 'Creates a Proposal resource.'
      responses:
        201:
          description: 'Proposal resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Proposal:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Proposal-read'
          links:
            GetProposalItem:
              parameters:
                uuid: '$response.body#/uuid'
              operationId: getProposalItem
              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /proposals/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Proposal:jsonld-create'
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal-create'
          text/html:
            schema:
              $ref: '#/components/schemas/Proposal-create'
        description: 'The new Proposal resource'
  '/polls/{id}/result':
    get:
      tags:
        - Result
        - Poll
      operationId: get_for_pollResultItem
      summary: 'Gets the result of a poll'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'Result resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Result:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Result-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Result-read'
        404:
          description: 'Resource not found'
      description: |
        This endpoint computes a fresh result from the ballots currently received.
        For now, you may read a poll's result _at any time_.
  '/polls/{pollId}/proposals/{proposalId}/ballots':
    post:
      parameters:
        -
          name: pollId
          in: path
          required: true
          description: 'Universally Unique IDentifier of the poll whose proposal we are judging.'
          example: ed8c2754-4220-4f54-94e9-5e86982e85ac
          schema:
            type: string
        -
          name: proposalId
          in: path
          required: true
          description: 'Universally Unique IDentifier of the proposal we are judging.'
          example: 368bd23a-6f19-4d8a-bb21-ff168ae2efc6
          schema:
            type: string
      tags:
        - Ballot
      operationId: postBallotCollection
      summary: 'Creates a Ballot resource.'
      responses:
        201:
          description: 'Ballot resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Ballot:jsonld-created'
            application/json:
              schema:
                $ref: '#/components/schemas/Ballot-created'
            text/html:
              schema:
                $ref: '#/components/schemas/Ballot-created'
          links:
            GetBallotItem:
              parameters:
                uuid: '$response.body#/uuid'
              operationId: getBallotItem
              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /ballots/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Ballot:jsonld-create'
          application/json:
            schema:
              $ref: '#/components/schemas/Ballot-create'
          text/html:
            schema:
              $ref: '#/components/schemas/Ballot-create'
        description: 'The new Ballot resource'
    get:
      tags:
        - Ballot
        - Proposal
      operationId: api_polls_proposals_ballots_get_subresource
      summary: 'Retrieves the collection of Ballot resources.'
      responses:
        200:
          description: 'Ballot collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Ballot:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ballot'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ballot'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: pollId
          in: path
          required: true
          schema:
            type: string
          description: 'Universally Unique IDentifier of the poll.'
          example: 6c1c8973-2df3-4b5a-a17d-a3a921dba448
        -
          name: proposalId
          in: path
          required: true
          schema:
            type: string
          description: 'Universally Unique IDentifier of the proposal.'
          example: ebf2fda8-5f45-4a33-9758-40d7f5a74998
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
  '/proposals/{id}':
    get:
      tags:
        - Proposal
      operationId: getProposalItem
      summary: 'Retrieves a Proposal resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'Proposal resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Proposal:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Proposal-read'
        404:
          description: 'Resource not found'
  '/proposals/{id}/ballots':
    get:
      tags:
        - Ballot
        - Proposal
      operationId: api_proposals_ballots_get_subresource
      summary: 'Retrieves the collection of Ballot resources.'
      responses:
        200:
          description: 'Ballot collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Ballot:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ballot'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ballot'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
  /users:
    get:
      summary: 'Retrieves the collection of Users.'
      description: 'Only administrators are allowed to access this.'
      tags:
        - User
        - Administration
      operationId: getUserCollection
      responses:
        200:
          description: 'User collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/User:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User-read'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      summary: 'Registers a new User.'
      description: 'Registers a new User in the database.  The email is optional and will help you reset a forgotten password.'
      tags:
        - User
        - Registration
      operationId: postUserCollection
      responses:
        201:
          description: 'User resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/User-read'
            text/html:
              schema:
                $ref: '#/components/schemas/User-read'
          links:
            GetUserItem:
              parameters:
                uuid: '$response.body#/uuid'
              operationId: getUserItem
              description: 'The `uuid` value returned in the response can be used as the `uuid` parameter in `GET /users/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/User:jsonld-create'
          application/json:
            schema:
              $ref: '#/components/schemas/User-create'
          text/html:
            schema:
              $ref: '#/components/schemas/User-create'
        description: 'The new User resource'
  '/users/{id}':
    get:
      summary: 'Gets information about a User.'
      description: 'You are authorized to get information about yourself only.'
      tags:
        - User
      operationId: getUserItem
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'User resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/User-read'
            text/html:
              schema:
                $ref: '#/components/schemas/User-read'
        404:
          description: 'Resource not found'
    put:
      summary: 'Updates information about a User.'
      description: 'Logged-in users are authorized to update information about themselves only.'
      tags:
        - User
      operationId: putUserItem
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
      responses:
        200:
          description: 'User resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User:jsonld-read'
            application/json:
              schema:
                $ref: '#/components/schemas/User-read'
            text/html:
              schema:
                $ref: '#/components/schemas/User-read'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/User:jsonld-edit'
          application/json:
            schema:
              $ref: '#/components/schemas/User-edit'
          text/html:
            schema:
              $ref: '#/components/schemas/User-edit'
        description: 'The updated User resource'
    delete:
      tags:
        - User
      operationId: deleteUserItem
      summary: 'Removes the User resource.'
      responses:
        204:
          description: 'User resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: |
            Universally Unique IDentifier (UUID)
          example: d434a72c-20cb-480f-9955-1fa2ce2e91b1
  /_jwt:
    post:
      tags:
        - Login
        - User
      operationId: postCredentialsItem
      summary: 'Returns an authentication Token from login Credentials.'
      description: 'Creating and participating to private polls require authentication.  The Token returned is a [JWT](https://jwt.io/) valid for one hour.'
      responses:
        200:
          description: 'A JSON Web Token (JWT)'
        400:
          description: 'Bad credentials.'
        401:
          description: 'Unauthorized credentials.'
        402:
          schema:
            $ref: '#/components/schemas/Token'
      requestBody:
        description: 'User Credentials'
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Credentials'
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
  /render/merit-profile.svg:
    get:
      tags:
        - Tools
      operationId: getSvgMeritProfileFromTally
      summary: |
        Generates a merit profile as SVG of the provided tally.
      description: |
        The resulting merit profile is not ranked, proposals are shown in the order they were submitted.
        This endpoint requires no authentication.
      responses:
        200:
          description: 'A SVG image.'
        201: []
  '/{tally}.json':
    get:
      tags:
        - Tools
      operationId: getJsonResultFromTally
      summary: |
        Resolves the provided tally.
      description: |
        This endpoint requires no authentication.
      responses:
        200:
          description: 'A JSON with information about the proposals, notably their rank.'
        201: []
security:
  -
    apiKey: []
components:
  schemas:
    Ballot:
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        uuid:
          description: 'Universally Unique IDentifier of the Ballot.'
          type: string
          format: uuid
          nullable: true
        id:
          readOnly: true
          description: |-
            Internal, incrementing numerical id, unused by ApiPlatform
            but used in tallying to ignore old|stale|overriden ballots by fetching the highest id,
            since ballots are immutable and new submissions after opinion changes create new ballots.
          type: integer
        proposal:
          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'
          type: string
          format: iri-reference
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          type: string
          format: iri-reference
          nullable: true
        participant:
          type: string
          format: iri-reference
          nullable: true
        createdAt:
          type: string
          format: date-time
    Ballot-create:
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          nullable: true
          anyOf:
            -
              $ref: '#/components/schemas/Grade-create'
    Ballot-created:
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        uuid:
          description: 'Universally Unique IDentifier of the Ballot.'
          type: string
          format: uuid
          nullable: true
        proposal:
          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'
          type: string
          format: iri-reference
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          type: string
          format: iri-reference
          nullable: true
    Ballot-read:
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        uuid:
          description: 'Universally Unique IDentifier of the Ballot.'
          type: string
          format: uuid
          nullable: true
        proposal:
          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'
          $ref: '#/components/schemas/Proposal-read'
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          nullable: true
          anyOf:
            -
              $ref: '#/components/schemas/Grade-read'
    'Ballot:jsonld':
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        uuid:
          description: 'Universally Unique IDentifier of the Ballot.'
          type: string
          format: uuid
          nullable: true
        id:
          readOnly: true
          description: |-
            Internal, incrementing numerical id, unused by ApiPlatform
            but used in tallying to ignore old|stale|overriden ballots by fetching the highest id,
            since ballots are immutable and new submissions after opinion changes create new ballots.
          type: integer
        proposal:
          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'
          type: string
          format: iri-reference
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          type: string
          format: iri-reference
          nullable: true
        participant:
          type: string
          format: iri-reference
          nullable: true
        createdAt:
          type: string
          format: date-time
    'Ballot:jsonld-create':
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          nullable: true
          anyOf:
            -
              $ref: '#/components/schemas/Grade:jsonld-create'
    'Ballot:jsonld-created':
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        uuid:
          description: 'Universally Unique IDentifier of the Ballot.'
          type: string
          format: uuid
          nullable: true
        proposal:
          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'
          type: string
          format: iri-reference
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          type: string
          format: iri-reference
          nullable: true
    'Ballot:jsonld-read':
      type: object
      description: 'A Ballot holds a (single) Judgment on a Proposal, by a Participant of a Poll.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        uuid:
          description: 'Universally Unique IDentifier of the Ballot.'
          type: string
          format: uuid
          nullable: true
        proposal:
          description: 'The Majority Judgment Poll Proposal the author is giving a grade to.'
          $ref: '#/components/schemas/Proposal:jsonld-read'
        grade:
          description: 'The Grade attributed by the Judge to the Proposal.'
          nullable: true
          anyOf:
            -
              $ref: '#/components/schemas/Grade:jsonld-read'
    Grade-create:
      type: object
      description: 'Grades are attributed to Proposals by Participants, in Ballots.'
      properties:
        name:
          type: string
        level:
          description: |-
            Used to compare grades procedurally.  \n
            Usually starts at zero (0) and ends at <MAXIMUM_GRADES>-1.  \n
            Grades of the same poll MUST have unique levels between themselves.
          type: integer
    Grade-read:
      type: object
      description: 'Grades are attributed to Proposals by Participants, in Ballots.'
      properties:
        uuid:
          readOnly: true
          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        level:
          description: |-
            Used to compare grades procedurally.  \n
            Usually starts at zero (0) and ends at <MAXIMUM_GRADES>-1.  \n
            Grades of the same poll MUST have unique levels between themselves.
          type: integer
    'Grade:jsonld-create':
      type: object
      description: 'Grades are attributed to Proposals by Participants, in Ballots.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          type: string
        level:
          description: |-
            Used to compare grades procedurally.  \n
            Usually starts at zero (0) and ends at <MAXIMUM_GRADES>-1.  \n
            Grades of the same poll MUST have unique levels between themselves.
          type: integer
    'Grade:jsonld-read':
      type: object
      description: 'Grades are attributed to Proposals by Participants, in Ballots.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        uuid:
          readOnly: true
          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        level:
          description: |-
            Used to compare grades procedurally.  \n
            Usually starts at zero (0) and ends at <MAXIMUM_GRADES>-1.  \n
            Grades of the same poll MUST have unique levels between themselves.
          type: integer
    Invitation-read:
      type: object
      description: 'An invitation to a poll.'
      properties:
        uuid:
          readOnly: true
          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'
          type: string
          format: uuid
          nullable: true
        poll:
          description: 'The poll this invitation is for.'
          $ref: '#/components/schemas/Poll-read'
        accepted:
          readOnly: true
          description: 'Whether this invitation was accepted by someone already.'
          type: boolean
        acceptedByYou:
          readOnly: true
          description: 'Whether this invitation was accepted by the current user.'
          type: boolean
    'Invitation:jsonld-read':
      type: object
      description: 'An invitation to a poll.'
      properties:
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        '@context':
          readOnly: true
          type: string
        uuid:
          readOnly: true
          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'
          type: string
          format: uuid
          nullable: true
        poll:
          description: 'The poll this invitation is for.'
          $ref: '#/components/schemas/Poll:jsonld-read'
        accepted:
          readOnly: true
          description: 'Whether this invitation was accepted by someone already.'
          type: boolean
        acceptedByYou:
          readOnly: true
          description: 'Whether this invitation was accepted by the current user.'
          type: boolean
    Poll-create:
      type: object
      description: 'A Liquid Majority Judgment Poll.'
      properties:
        slug:
          description: 'A unique, short, human-friendly identifier for the Poll.'
          type: string
        scope:
          description: |-
            The scope defines how and by whom the poll is accessible:
            `public`: Everyone may access the poll, and it will be publicly listed ;
            `unlisted`: Everyone may access the poll if they know its URI ;
            `private`: Only invited participants may participate ;
            The default scope is `unlisted`.
          type: string
        subject:
          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'
          type: string
        proposals:
          description: |-
            A list of Proposals to judge,
            that MUST contain at least two proposals,
            and can have at most 256 proposals
            but that upper limit is arbitrary
            and may wildly vary after benchmark and discussion.
          type: array
          items:
            $ref: '#/components/schemas/Proposal-create'
        grades:
          description: |-
            A list of Grades that Participants may give to Proposals â€“
            That list MUST contain at least two Grades,
            and at most 16 (another arbitrary limit to discuss).
          type: array
          items:
            $ref: '#/components/schemas/Grade-create'
      required:
        - subject
    Poll-read:
      type: object
      description: 'A Liquid Majority Judgment Poll.'
      properties:
        uuid:
          description: |-
            A Universally Unique IDentifier (version 4)
            like b7e7d328-c1fb-4af7-b258-23d08f6ed2d4
            and you may use the short prefix to fetch a poll as well,
            like b7e7d328 or even b7e-7d-328 to make it more human-legible.
          type: string
        slug:
          description: 'A unique, short, human-friendly identifier for the Poll.'
          type: string
        scope:
          description: |-
            The scope defines how and by whom the poll is accessible:
            `public`: Everyone may access the poll, and it will be publicly listed ;
            `unlisted`: Everyone may access the poll if they know its URI ;
            `private`: Only invited participants may participate ;
            The default scope is `unlisted`.
          type: string
        subject:
          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'
          type: string
        proposals:
          description: |-
            A list of Proposals to judge,
            that MUST contain at least two proposals,
            and can have at most 256 proposals
            but that upper limit is arbitrary
            and may wildly vary after benchmark and discussion.
          type: array
          items:
            $ref: '#/components/schemas/Proposal-read'
        grades:
          description: |-
            A list of Grades that Participants may give to Proposals â€“
            That list MUST contain at least two Grades,
            and at most 16 (another arbitrary limit to discuss).
          type: array
          items:
            $ref: '#/components/schemas/Grade-read'
        canGenerateInvitations:
          description: |-
            Can the current user generate invitations for this poll or not?
            Helps clients show the relevant links and forms.
          type: boolean
      required:
        - subject
    'Poll:jsonld-create':
      type: object
      description: 'A Liquid Majority Judgment Poll.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        slug:
          description: 'A unique, short, human-friendly identifier for the Poll.'
          type: string
        scope:
          description: |-
            The scope defines how and by whom the poll is accessible:
            `public`: Everyone may access the poll, and it will be publicly listed ;
            `unlisted`: Everyone may access the poll if they know its URI ;
            `private`: Only invited participants may participate ;
            The default scope is `unlisted`.
          type: string
        subject:
          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'
          type: string
        proposals:
          description: |-
            A list of Proposals to judge,
            that MUST contain at least two proposals,
            and can have at most 256 proposals
            but that upper limit is arbitrary
            and may wildly vary after benchmark and discussion.
          type: array
          items:
            $ref: '#/components/schemas/Proposal:jsonld-create'
        grades:
          description: |-
            A list of Grades that Participants may give to Proposals â€“
            That list MUST contain at least two Grades,
            and at most 16 (another arbitrary limit to discuss).
          type: array
          items:
            $ref: '#/components/schemas/Grade:jsonld-create'
      required:
        - subject
    'Poll:jsonld-read':
      type: object
      description: 'A Liquid Majority Judgment Poll.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        uuid:
          description: |-
            A Universally Unique IDentifier (version 4)
            like b7e7d328-c1fb-4af7-b258-23d08f6ed2d4
            and you may use the short prefix to fetch a poll as well,
            like b7e7d328 or even b7e-7d-328 to make it more human-legible.
          type: string
        slug:
          description: 'A unique, short, human-friendly identifier for the Poll.'
          type: string
        scope:
          description: |-
            The scope defines how and by whom the poll is accessible:
            `public`: Everyone may access the poll, and it will be publicly listed ;
            `unlisted`: Everyone may access the poll if they know its URI ;
            `private`: Only invited participants may participate ;
            The default scope is `unlisted`.
          type: string
        subject:
          description: 'The subject of the poll. Careful consideration should be taken in the writing of this.'
          type: string
        proposals:
          description: |-
            A list of Proposals to judge,
            that MUST contain at least two proposals,
            and can have at most 256 proposals
            but that upper limit is arbitrary
            and may wildly vary after benchmark and discussion.
          type: array
          items:
            $ref: '#/components/schemas/Proposal:jsonld-read'
        grades:
          description: |-
            A list of Grades that Participants may give to Proposals â€“
            That list MUST contain at least two Grades,
            and at most 16 (another arbitrary limit to discuss).
          type: array
          items:
            $ref: '#/components/schemas/Grade:jsonld-read'
        canGenerateInvitations:
          description: |-
            Can the current user generate invitations for this poll or not?
            Helps clients show the relevant links and forms.
          type: boolean
      required:
        - subject
    Proposal-create:
      type: object
      description: 'A Proposal of a Poll whom any Participant can give a Grade to.'
      properties:
        title:
          description: 'The title of the proposal.'
          type: string
        poll:
          description: 'The poll this proposal is attached to.'
          $ref: '#/components/schemas/Poll-create'
    Proposal-read:
      type: object
      description: 'A Proposal of a Poll whom any Participant can give a Grade to.'
      properties:
        uuid:
          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'
          type: string
          format: uuid
          nullable: true
        title:
          description: 'The title of the proposal.'
          type: string
    'Proposal:jsonld-create':
      type: object
      description: 'A Proposal of a Poll whom any Participant can give a Grade to.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        title:
          description: 'The title of the proposal.'
          type: string
        poll:
          description: 'The poll this proposal is attached to.'
          $ref: '#/components/schemas/Poll:jsonld-create'
    'Proposal:jsonld-read':
      type: object
      description: 'A Proposal of a Poll whom any Participant can give a Grade to.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        uuid:
          description: 'Universally Unique IDentifier, something like this: 10e3c5e8-4a7d-4d23-a20a-8c175bf45a92'
          type: string
          format: uuid
          nullable: true
        title:
          description: 'The title of the proposal.'
          type: string
    ProposalGradeResult-read:
      type: object
      description: |-
        Results for one Grade of one Proposal,
        basically the tally of Ballots for this Grade and Proposal,
        but there might be more information in there in the future.
      properties:
        grade:
          description: 'The IRI of the Grade this Result is about.'
          type: string
          format: iri-reference
        proposal:
          description: 'The IRI of the Proposal this Result is about.'
          type: string
          format: iri-reference
        tally:
          description: 'Amount of Ballots emitted for this Grade on the Proposal.'
          type: integer
    'ProposalGradeResult:jsonld-read':
      type: object
      description: |-
        Results for one Grade of one Proposal,
        basically the tally of Ballots for this Grade and Proposal,
        but there might be more information in there in the future.
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        grade:
          description: 'The IRI of the Grade this Result is about.'
          type: string
          format: iri-reference
        proposal:
          description: 'The IRI of the Proposal this Result is about.'
          type: string
          format: iri-reference
        tally:
          description: 'Amount of Ballots emitted for this Grade on the Proposal.'
          type: integer
    ProposalResult-read:
      type: object
      description: 'The ranked Result of one Proposal in a Poll.'
      properties:
        proposal:
          description: 'The Proposal this Result is for.'
          $ref: '#/components/schemas/Proposal-read'
        rank:
          description: |-
            The computed rank of the Proposal in the Poll â€”
            Rank starts at 1 and goes upwards, and
            two proposals may have the same rank.
          type: integer
        medianGrade:
          description: 'The median Grade of the Proposal.'
          $ref: '#/components/schemas/Grade-read'
        tally:
          description: 'Total Amount of Ballots emitted for the Proposal this Result is about.'
          type: integer
        gradesResults:
          type: array
          items:
            $ref: '#/components/schemas/ProposalGradeResultRead'
          description: |-
            Results for each Grade, on this Proposal â€”
            This is the merit profile of the Proposal.
    'ProposalResult:jsonld-read':
      type: object
      description: 'The ranked Result of one Proposal in a Poll.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        proposal:
          description: 'The Proposal this Result is for.'
          $ref: '#/components/schemas/Proposal:jsonld-read'
        rank:
          description: |-
            The computed rank of the Proposal in the Poll â€”
            Rank starts at 1 and goes upwards, and
            two proposals may have the same rank.
          type: integer
        medianGrade:
          description: 'The median Grade of the Proposal.'
          $ref: '#/components/schemas/Grade:jsonld-read'
        tally:
          description: 'Total Amount of Ballots emitted for the Proposal this Result is about.'
          type: integer
        gradesResults:
          type: array
          items:
            $ref: '#/components/schemas/ProposalGradeResultRead'
          description: |-
            Results for each Grade, on this Proposal â€”
            This is the merit profile of the Proposal.
    Result-read:
      type: object
      description: 'A Result of a Majority Judgment Poll.  Holds a leaderboard of the proposals.'
      properties:
        poll:
          description: 'The Poll this Result describes.'
          $ref: '#/components/schemas/Poll-read'
        algorithm:
          description: 'The name of the algorithm used to derive this Result.'
          type: string
        leaderboard:
          type: array
          items:
            $ref: '#/components/schemas/ProposalResultRead'
          description: |-
            In order, each Proposals' Result.  In extreme,
            low-participation polls, some Proposals may have the same rank ;
            in that case, their order should be the order they were added to the poll.
    'Result:jsonld-read':
      type: object
      description: 'A Result of a Majority Judgment Poll.  Holds a leaderboard of the proposals.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        poll:
          description: 'The Poll this Result describes.'
          $ref: '#/components/schemas/Poll:jsonld-read'
        algorithm:
          description: 'The name of the algorithm used to derive this Result.'
          type: string
        leaderboard:
          type: array
          items:
            $ref: '#/components/schemas/ProposalResultRead'
          description: |-
            In order, each Proposals' Result.  In extreme,
            low-participation polls, some Proposals may have the same rank ;
            in that case, their order should be the order they were added to the poll.
    User-create:
      type: object
      description: 'Users create, maintain and participate in Polls.'
      properties:
        email:
          description: 'When provided, the email must be unique amongst Users.'
          type: string
          nullable: true
        username:
          description: 'The username must be unique amongst Users.'
          type: string
        password:
          description: 'The plain password of the User.'
          type: string
      required:
        - username
    User-edit:
      type: object
      description: 'Users create, maintain and participate in Polls.'
      properties:
        email:
          description: 'When provided, the email must be unique amongst Users.'
          type: string
          nullable: true
        username:
          description: 'The username must be unique amongst Users.'
          type: string
        password:
          description: 'The plain password of the User.'
          type: string
      required:
        - username
    User-read:
      type: object
      description: 'Users create, maintain and participate in Polls.'
      properties:
        uuid:
          type: string
          format: uuid
          nullable: true
        email:
          description: 'When provided, the email must be unique amongst Users.'
          type: string
          nullable: true
        username:
          description: 'The username must be unique amongst Users.'
          type: string
        polls:
          description: 'The polls authored by this User.'
          type: array
          items:
            $ref: '#/components/schemas/Poll-read'
      required:
        - username
    'User:jsonld-create':
      type: object
      description: 'Users create, maintain and participate in Polls.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        email:
          description: 'When provided, the email must be unique amongst Users.'
          type: string
          nullable: true
        username:
          description: 'The username must be unique amongst Users.'
          type: string
        password:
          description: 'The plain password of the User.'
          type: string
      required:
        - username
    'User:jsonld-edit':
      type: object
      description: 'Users create, maintain and participate in Polls.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        email:
          description: 'When provided, the email must be unique amongst Users.'
          type: string
          nullable: true
        username:
          description: 'The username must be unique amongst Users.'
          type: string
        password:
          description: 'The plain password of the User.'
          type: string
      required:
        - username
    'User:jsonld-read':
      type: object
      description: 'Users create, maintain and participate in Polls.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        uuid:
          type: string
          format: uuid
          nullable: true
        email:
          description: 'When provided, the email must be unique amongst Users.'
          type: string
          nullable: true
        username:
          description: 'The username must be unique amongst Users.'
          type: string
        polls:
          description: 'The polls authored by this User.'
          type: array
          items:
            $ref: '#/components/schemas/Poll:jsonld-read'
      required:
        - username
    Token:
      type: object
      description: 'An authentication token ([JWT](https://jwt.io/)) for the `Authorization: Bearer` header.'
      properties:
        token:
          type: string
          readOnly: true
    Credentials:
      type: object
      description: 'User credentials to submit to the login endpoint in order to get a perishable authentication token (Json Web Token).'
      properties:
        usernameOrEmail:
          type: string
          example: michel
          description: 'The email or username you chose during registration.'
        password:
          type: string
          example: ~5Up3Â®$3cR3741337
          description: 'The password or passphrase you chose during registration.'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      description: 'Value for the Authorization header'
      name: Authorization
servers:
  -
    url: 'https://oas.mieuxvoter.fr'
    description: 'Demo server of the MieuxVoter association'

