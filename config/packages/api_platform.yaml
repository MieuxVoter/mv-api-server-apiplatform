# https://api-platform.com/docs/core/configuration/

api_platform:
    # The title of the API.
    title: 'Majority Judgment API'

    # The description of the API.
    description: |
        This is a **deliberation service** using **majority judgment** polling.
        It's **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr).
        You're browsing the API documentation and sandbox.

        ## Use one of the known clients

        - TODO: add an URL to a client of the API


        ## Try it out the hard way

        ### Create an account

        You will need a user account to interact with polls.
        Head to **Registration** â†’ `POST /users` below.
        Click _Try it out_, set your desired credentials, and execute the query.
        Scroll down to see the response.

        ### Authenticate

        Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour.
        Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button.

        ### Create a poll

        **Poll** â†’ `POST /polls`

        Keep the response, you'll need the uuids.

        > TODO: document invitation generation

        ### Submit judgments

        **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`

        One request per proposal, for now.  We plan on making an endpoint to submit them all at once.

        ### Collect the results

        **Result** â†’ `GET /polls/{id}/result`

        ## Use a generated client library

        - for php  (link!)
        - for typescript-node  (link!!)
        - â€¦

        There are clients we can generate for most languages.
        Get in touch if you'd like one in particular!
        Or clone this project and use `bin/generate-client.bash -t whatever`.


    # The version of the API.
    version: '0.0.0-dev'

    # Set this to false if you want Webby to disappear.
    show_webby: false

    # The shenanigans
    mapping:
        paths: ['%kernel.project_dir%/src/Entity']
    
    enable_profiler: true
    
    swagger:
         api_keys:
             apiKey:
                name: Authorization
                type: header