security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        #in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User

    encoders:
        App\Entity\User: 
            algorithm: 'argon2i'
            # maximum memory (in KiB) that may be used to compute the Argon2 hash
            memory_cost: 1024
            #  number of times the Argon2 hash algorithm will be run
            time_cost: 3

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER: ROLE_ADMIN

    firewalls:
        # The API requires authentication to be used, for the most part.
        # This is because:
        # - Ballots are submitted individually  (in case of big amounts of proposals)
        # - We need to be able to revert abuse
        # - We will be able to "link" our accounts to France Connect, to authenticate

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_documentation_sandbox:
            pattern:  ^/docs?(?:[.](?:html|xml|json|ya?ml))?$
            security: false

        api_documentation_sandbox_root:
            pattern:  ^/$
            security: false

        api_register:
            pattern: ^/users/?$
            methods: ['POST']
            stateless: true
            anonymous: true

        api_read_public_polls:
            pattern: ^/polls/?$
            methods: ['GET']
            stateless: true
            anonymous: true
            # We HAVE TO repeat the config here for Security to trigger and find the User if any.
            http_basic:
                realm: "Authentication Desk"
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_read_public_poll:
            pattern: ^/polls/[a-z0-9_-]+/?$
            methods: ['GET']
            stateless: true
            anonymous: true
            # We HAVE TO repeat the config here for Security to trigger and find the User if any.
            http_basic:
                realm: "Authentication Desk"
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        api_tool_merit_profile_via_query:
            pattern: ^/render
            security: false

        api_tool_merit_profile_via_path:
            pattern: ^/[0-9_-]+[.](?:json|svg|png)$
            security: false

        api:
            pattern: ^/
            stateless: true
            provider: app_user_provider
            http_basic:
                realm: "Authentication Desk"
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            json_login:
                check_path: /_jwt
                username_path: usernameOrEmail
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Is the "main" even used, now that api matches ^/ ?
        main:
#            anonymous: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            http_basic:
                realm: "Authentication Desk"
            
            
            

                
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
