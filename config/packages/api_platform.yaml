# https://api-platform.com/docs/core/configuration/

api_platform:
    # The title of the API.
    title: 'Majority Judgment API'

    # The description of the API.
    # That description ends up on the generated sandbox and in the generated libraries.
    description: |
        This is a **deliberation service** using **majority judgment** polling.
        It's **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr).
        You're browsing the API documentation and sandbox.

        ## Use one of the known clients

        - https://cli.mieuxvoter.fr


        ## Try it out the hard way

        ### Create an account

        You will need a user account to interact with polls.
        Head to **Registration** â†’ `POST /users` below.
        Click _Try it out_, set your desired credentials, and execute the query.
        Scroll down to see the response.

        ### Authenticate

        Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour.
        Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button,
        prefixed by the word `Bearer `.

        It should look like: `Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJâ€¦`

        ### Create a poll

        **Poll** â†’ `POST /polls`

        Here is an example of what you could send:

        ```
        {
          "slug": "france-presidence-2027",
          "scope": "public",
          "subject": "PrÃ©sidentielle FranÃ§aise 2027",
          "proposals": [
            {
              "title": "Continuer le nÃ©olibÃ©ralisme"
            },
            {
              "title": "Ne pas prendre plus Ã  la nature que ce qu'elle est capable de renouveler"
            },
            {
              "title": "Former une AssemblÃ©e Constituante (Liquide)"
            }
          ],
          "grades": [
            { "name": "Ã€ Rejeter", "level": 0 },
            { "name": "Insuffisant", "level": 1 },
            { "name": "Passable", "level": 2 },
            { "name": "Assez Bien", "level": 3 },
            { "name": "Bien", "level": 4 },
            { "name": "TrÃ¨s Bien", "level": 5 },
            { "name": "Excellent", "level": 6 }
          ]
        }
        ```

        Keep the response, you'll need the uuids.

        ### Invite people to private polls

        > TODO: document invitation generation

        ### Submit judgments

        **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`

        One request per proposal, for now.  We plan on making an endpoint to submit them all at once.

        ### Collect the results

        **Result** â†’ `GET /polls/{id}/result`

        ## Use a generated client library

        - for [php](https://github.com/MieuxVoter/mv-api-client-lib-php)
        - for [typescript](https://github.com/MieuxVoter/mv-api-client-lib-typescript)
        - â€¦

        There are clients we can generate for most languages.
        Get in touch if you'd like one in particular!
        Or clone this project and use `bin/generate-client.bash -t whatever`.


    # The version of the API.
    # I think we're allowed to access ENV vars in here.
    # â†’ This should be a variable, and reflect `git describe â€¦`
    version: '0.0.0-dev'

    # I love Webby, although it is disabled.
    show_webby: false

    # The shenanigans
    mapping:
        paths: ['%kernel.project_dir%/src/Entity']
    
    enable_profiler: true
    
    swagger:
        # The active versions of OpenAPI to be exported or used in the swagger_ui. The first value is the default.
        versions:
            - 3
            # It's somewhat safe to remove support for v2 now, if need be.
            - 2
        api_keys:
            apiKey:
                name: Authorization
                type: header

    # Available format.  The order matters.
    # We use json first because our collections of models in jsonld are of type object, not array.
    # I'm not sure if it's intended, and it makes the generator create inline models of responses -> BOUERK
    # Since the generator uses the first format in the response's content in the OAS, we want json first.
    # The html format needs to be there for the doc sandbox to appear.
    formats:
        json:     ['application/json']
        jsonld:   ['application/ld+json']
        html:     ['text/html']
#        jsonhal:  ['application/hal+json']
#        jsonapi:  ['application/vnd.api+json']
#        xml:      ['application/xml', 'text/xml']
#        yaml:     ['application/x-yaml']
#        csv:      ['text/csv']
